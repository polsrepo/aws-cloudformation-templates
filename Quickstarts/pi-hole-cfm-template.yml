Description: pi-hole

Parameters:
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    
  NewSubnetCidrBlock:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    
  InternetGatewayId:
    Type: String
    
  SgIngressCidrIP:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge

  SshKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
  
  AmiID:
    Type: String
    Description: Ubuntu 20.04 LTS. Choose between eu-west-1, eu-west-2, eu-west-3, us-east-1, us-east-2, us-west-1 or us-west-2. Default is eu-west-1.
    Default: ami-0fd8802f94ed1c969
    AllowedValues:
      - ami-0fd8802f94ed1c969
      - ami-04842bc62789b682e
      - ami-064736ff8301af3ee
      - ami-0149b2da6ceec4bb0
      - ami-0d5bf08bc8017c83b
      - ami-03f6d497fceb40069
      - ami-0c09c7eb16d3e8e70

  ExistingSecurityGroupsIds:
    Description: Select any existing SGs you would like to associate the Pi-hole instance with.
    Type: 'List<AWS::EC2::SecurityGroup::Id>'

  PiHolePassword:
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - VpcId
          - NewSubnetCidrBlock
          - InternetGatewayId
          - SgIngressCidrIP
      - Label:
          default: EC2
        Parameters:
          - InstanceType
          - SshKeyPair
          - AmiID
          - ExistingSecurityGroupsIds
          - PiHolePassword
          
Resources:
  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref NewSubnetCidrBlock
      
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      
  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayId
      RouteTableId: !Ref RouteTable
      
  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet
      
  EipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref ElasticIp
      InstanceId: !Ref Instance
      
  NewSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: pi-hole-security-group
      GroupDescription: pi-hole-security-group
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

  Ec2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole  

  Instance:
    Type: AWS::EC2::Instance
    DependsOn: [ElasticIp, NewSecurityGroup]
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
      ImageId: !Ref AmiID
      InstanceType: !Ref InstanceType
      KeyName: !Ref SshKeyPair
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref Ec2InstanceProfile      
      SecurityGroupIds: 
        - Fn::Join:
          - ','
          - Ref: ExistingSecurityGroupsIds
        - Fn::GetAtt:
          - NewSecurityGroup
          - GroupId

      UserData:
        Fn::Base64: 
            !Sub
            - |
                #!/bin/bash
                apt update -y
                apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
                apt install -y git
                apt install -y python3.9 python3.9-dev
                apt install -y awscli
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo \
                  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt update
                apt install -y docker-ce docker-ce-cli containerd.io
                sed -r -i.orig 's/#?DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf
                rm /etc/resolv.conf
                ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
                systemctl restart systemd-resolved
                service docker start
                IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                docker run -d -p 53:53/tcp -p 53:53/udp -p 80:80 -e ServerIP="$IP" -e WEBPASSWORD="${Private1}" pihole/pihole
            - Private1: !Ref PiHolePassword
