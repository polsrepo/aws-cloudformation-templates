Description: This template deploys a "ready to go" pi-hole instance in a new VPC.

Parameters:
  NewVpcCidrBlock:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    
  NewSubnetCidrBlock:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    
  SgIngressCidrIP:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceImageId:
    Type : String
    Description: USE THIS PARAMETER ONLY IF YOU ARE UPDATING THE STACK. Add the current AmiID of the instance.
    Default: ''
  
  LatestUbuntu20AMI:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: Do NOT change this value.
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    AllowedValues:
      - /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id

  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge

  SshKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  PiHolePassword:
    Type: String
    NoEcho: true

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack creation - VPC
        Parameters:
          - NewVpcCidrBlock
          - NewSubnetCidrBlock
          - SgIngressCidrIP
      - Label:
          default: Stack creation - EC2
        Parameters:
          - InstanceType
          - SshKeyPair
          - PiHolePassword
      - Label:
          default: Stack update - EC2
        Parameters:
          - InstanceImageId
      - Label:
          default: Do NOT change
        Parameters:
          - LatestUbuntu20AMI          

Conditions:
  HasInstanceImageId: !Not [!Equals [!Ref 'InstanceImageId', '']]
          
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref NewVpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref NewSubnetCidrBlock
      
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      
  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
      
  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet
      
  EipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref ElasticIp
      InstanceId: !Ref Instance
      
  NewSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: pi-hole-security-group
      GroupDescription: pi-hole-security-group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
        - CidrIp: !Ref SgIngressCidrIP
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22

  Ec2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole  

  Instance:
    Type: AWS::EC2::Instance
    DependsOn: [ElasticIp, NewSecurityGroup]
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
      ImageId: !If [ HasInstanceImageId, !Ref InstanceImageId, !Ref LatestUbuntu20AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref SshKeyPair
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref Ec2InstanceProfile      
      SecurityGroupIds:
        - !GetAtt "NewSecurityGroup.GroupId"
      UserData:
        Fn::Base64: 
            !Sub
            - |
                #!/bin/bash
                apt update -y
                apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
                apt install -y git
                apt install -y python3.9 python3.9-dev
                apt install -y awscli
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                echo \
                  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt update
                apt install -y docker-ce docker-ce-cli containerd.io
                sed -r -i.orig 's/#?DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf
                rm /etc/resolv.conf
                ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
                systemctl restart systemd-resolved
                service docker start
                IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                docker run -d -p 53:53/tcp -p 53:53/udp -p 80:80 -e ServerIP="$IP" -e WEBPASSWORD="${Private1}" pihole/pihole
            - Private1: !Ref PiHolePassword
